install.packages("randomForest")
install.packages("randomForest")
library(randomForest)
library(readr)
install.packages("readr")
########################################################################################
# Clear plots
if(!is.null(dev.list()["RStudioGD"]))
{
dev.off(dev.list()["RStudioGD"]);
}
# Clear workspace
rm(list=ls())
# Clear console
cat("\014")
date()
########################################################################################
train = read_csv("..\\..\\data\\train.csv")
test = read_csv("..\\..\\data\\test.csv")
library(readr)
train = read_csv("..\\..\\data\\train.csv")
test = read_csv("..\\..\\data\\test.csv")
features=colMeans(train)>0
train=train[,features]
fulltrain = train
fulltrainlabels = as.factor(fulltrain[1:nrow(fulltrain),1])
fulltrain = fulltrain[1:nrow(fulltrain),-1]
features=features[-1]
test=test[,features]
# Save the new data files
#write_csv(train,"newtrain.csv")
#write_csv(test,"newtest.csv")
# Obtain a sample of training set
set.seed(0)
numTrain = nrow(train) # or use some other smaller value for testing purposes
numTrees = 200
rows=sample(1:nrow(train), numTrain)
labels = as.factor(train[rows,1])
truevalues=train[rows,1]
train = train[rows,-1]
# Convert all values to binary
minlevel=0
train=train>minlevel
fulltrain=fulltrain>minlevel
test=test>minlevel
# Build model on sample of training set, and evaluate based on full training set
#rf2=randomForest(train, labels, xtest=fulltrain, ntree=numTrees)
#evalpredictions=data.frame(ImageId=1:nrow(fulltrain), Label=levels(fulltrainlabels)[rf2$test$predicted])
#head(evalpredictions)
#mean(evalpredictions[,2]==fulltrainlabels)
# Build model on sample of training set, and make predictions on the official test set
rf=randomForest(train, labels, xtest=test, ntree=numTrees)
predictions=data.frame(ImageId=1:nrow(test), Label=levels(labels)[rf$test$predicted])
head(predictions)
write_csv(predictions,"predictions.csv")
write_csv(predictions,"predictions.csv")
summary(test.predict)
test.pca <- predict(pca, newdata = test)
library(e1071)
library(readr)
train = read_csv("..\\..\\data\\train.csv")
test = read_csv("..\\..\\data\\test.csv")
pca <- prcomp(train, scale=FALSE)
labels = as.factor(train[,1])
model <- svm(pr$x[,1:10],
labels, probability=TRUE);
model <- svm(pca$x[,1:10],
labels, probability=TRUE);
test.pca <- predict(pca, newdata = test)
labels = as.factor(train[,1])
pca <- prcomp(train[, -1], scale=FALSE)
percentVariance <- pca$sdev^2/sum(pca$sdev^2)
sum(percentVariance[1:100]) # 91.5%
sum(percentVariance[1:150]) # 94.9%
sum(percentVariance[1:200]) # 96.7%
sum(percentVariance[1:350]) # 99.2%
model <- svm(pca$x[,1:10],
labels, probability=TRUE);
test.pca <- predict(pca, newdata = test)
test.predict <- predict(model, newdata = test.pca[, 1:10])
summary(test.predict)
predictions=data.frame(ImageId=1:nrow(test), Label=levels(labels)[test.predict])
write_csv(predictions,"predictions.csv")
model <- svm(pca$x[,1:200],
labels, probability=TRUE);
test.pca <- predict(pca, newdata = test)
test.predict <- predict(model, newdata = test.pca[, 1:200])
predictions=data.frame(ImageId=1:nrow(test), Label=levels(labels)[test.predict])
write_csv(predictions,"predictions.csv")
summary(test.predict)
model <- svm(pca$x[,1:350],
labels, probability=TRUE);
test.pca <- predict(pca, newdata = test)
test.predict <- predict(model, newdata = test.pca[, 1:350])
predictions=data.frame(ImageId=1:nrow(test), Label=levels(labels)[test.predict])
write_csv(predictions,"predictions.csv")
A <- c(12.0,12.0,12.9,13.6,16.6,17.2,17.5,17.5,18.2,19.1,19.3,19.8,20.3,20.5,20.6,21.3,21.6,22.1,22.2,22.6,23.1,24,24.3,26.7,29.7)
boxplot(A)
boxplot(A, title="Intrinsic group"")
boxplot(A, title="Intrinsic group"")
?boxplot
B <- c(5,5.4,6.1,10.9,11.8,12,12.3,14.8,15,16.8,17.2,17.2,17.4,17.5,18.5,18.7,18.7,19.2,19.5,20.7,21.2,22.1,24)
boxplot(A, B)
?boxplot
boxplot(A, B, names=c("Intrinsic group", "Extrinsic group"))
rm(list=ls())
cat("\014")
date()
library(e1071)
library(readr)
train = read_csv("..\\..\\data\\train.csv")
labels = as.factor(train[,1])
pca <- prcomp(train[, -1], scale=FALSE)
rm(list=ls())
# Clear console
cat("\014")
date()
library(e1071)
library(readr)
train <- read_csv("..\\..\\data\\train.csv")
totalRow <- nrow(train) # or use some other smaller value for testing purposes
totalRows <- nrow(train) # or use some other smaller value for testing purposes
rm totalRow
rm(totalRow)
set.seed(0)
trainRows <- sample(fulltrain.compressed, 10000)
testRows <- sample(fulltrain.compressed[10001: totalRows], 2000)
set.seed(0)
trainRows <- sample(fulltrain.compressed, 10000)
fullTrain <- train
rm(train)# Load data sets
trainRows <- sample(fullTrain, 10000)
